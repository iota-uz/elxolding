package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"
	"net/http"

	model1 "github.com/iota-uz/iota-sdk/modules/core/interfaces/graph/gqlmodels"
	"github.com/iota-uz/iota-sdk/modules/core/interfaces/graph/mappers"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/iota-sdk/pkg/configuration"
)

// AuthenticateWithUserID is the resolver for the authenticateWithUserID field.
func (r *mutationResolver) AuthenticateWithUserID(ctx context.Context, userID int, password string) (*model1.Session, error) {
	writer, ok := composables.UseWriter(ctx)
	if !ok {
		return nil, fmt.Errorf("request params not found")
	}
	_, session, err := r.authService.AuthenticateWithUserId(ctx, uint(userID), password)
	if err != nil {
		return nil, err
	}
	conf := configuration.Use()
	cookie := &http.Cookie{
		Path:     conf.SidCookieKey,
		Value:    session.Token,
		Expires:  session.ExpiresAt,
		HttpOnly: false,
		SameSite: http.SameSiteDefaultMode,
		Secure:   false,
		Domain:   conf.Domain,
	}
	http.SetCookie(writer, cookie)
	return mappers.SessionToGraphModel(session), nil
}
